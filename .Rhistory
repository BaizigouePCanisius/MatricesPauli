geom_piont()
ggplot(midwest, aes(x = area, y = poptotal)) +
geom_point()
ggplot(midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state, size = popdensity))
ggplot(midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state, size = popdensity)) +
geom_smooth( method = "lm", se = TRUE)
ggplot(midwest, aes(x = area, y = poptotal)) +
geom_point(aes(col = state, size = popdensity)) +
geom_smooth( method = "lm", se = TRUE) +
labs(subtitle = "graphique pop Vs surface",
y = "la population",
x = "la suface",
title = "NUAGES DE POINTS DE LA POPULATION EN FONCTION DE LA SURFACE DU COMTE",
caption = "source: midwest datasets")
source("C:/Users/ThinkPad T470/Desktop/Tracés/mes tracés.R")
library(ggplotly)
mpg
head(mpg)
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "nuage de point de la consommation de carburan",
y = "carburant sur la route",
x = "carburant dans la ville",
subtitle = "cty vs hwy",
caption = "source: MPG")
geom_smooth(method = "lm", se = FALSE) +
labs(title = "nuage de point de la consommation de carburan",
y = "carburant sur la route",
x = "carburant dans la ville",
subtitle = "cty vs hwy",
caption = "source: MPG")
ggplot + geom_jitter(width = 0.5, size = 1) +
labs(title = "nuage de point de la consommation de carburan",
y = "carburant sur la route",
x = "carburant dans la ville",
subtitle = "cty vs hwy",
caption = "source: MPG")
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = 'tomato3', show.legend = FALSE) +
labs(title = "cty vs hwy",
subtitle = "decomptage"
caption = "source: mpg")
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = 'tomato3', show.legend = FALSE) +
labs(title = "cty vs hwy",
subtitle = "decomptage",
caption = "source: mpg")
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = 'tomato3', show.legend = TRUE) +
labs(title = "cty vs hwy",
subtitle = "decomptage",
caption = "source: mpg")
ggMarginal(ggplot, type = "histogram", fill = "transparent")
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = "blue", show.legend = TRUE) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = "yellow", show.legend = TRUE) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = model , show.legend = TRUE) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = "green" , show.legend = TRUE) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = "green" , show.legend = TRUE) +
geom_smooth(method = "lm", se = FALSE) + geom_histogram(type = "histogram", fill = "blue")
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = "green" , show.legend = TRUE) +
geom_smooth(method = "lm", se = FALSE) + geom_histogram(fill = "blue")
ggplot(mpg, aes(cty)) +
geom_count(col = "green" , show.legend = TRUE) +
geom_smooth(method = "lm", se = FALSE) + geom_histogram(fill = "blue")
ggplot(mpg, aes(cty, hwy)) +
geom_count(col = "green" , show.legend = TRUE) +
geom_histogram(fill = "blue")
ggplot(mpg, aes(cty, hwy)) +
geom_histogram(fill = "blue")
ggplot(mpg, aes(cty, hwy)) +
geom_histogram(fill = "transparent")
source("C:/Users/ThinkPad T470/Desktop/Tracés/mes tracés.R")
library(readr)
brca_data_w_subtypes <- read_csv("C:/Users/ThinkPad T470/Downloads/brca_data_w_subtypes.csv")
View(brca_data_w_subtypes)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
library(patchwork)
library(gapminder)
install.packages("devtools")
library(devtools)
create(MatricePau)
create("MatricePau")
library(tidyverse)
library(ggridges)
library(viridis)
library(hrbrthemes)
library(patchwork)
library(gapminder)
library(ggplot2)
library(ggplotlyExtra)
library(ggcorrplot)
library(ggExtra)
library(ggalt)
library(quantmod)
library(ggthemes)
library(waffle)
library(highcharter)
library(dplyr)
library(ggfortify)
install.packages(ggmap)
install.packages("ggmap")
library(ggmap)
install.packages("directlabels")
library(directlabels)
ggplot(mpg, aes(displ, hwy, color = class)) +
geom_point(show.legend = FALSE) +
directlabels::geom_dl(aes(label = class), methode = "smart.grid")#+
ggplot(mpg, aes(displ, hwy, color = class)) +
geom_point(show.legend = FALSE) +
directlabels::geom_dl(aes(label = class), method = "smart.grid")#+
ggmap(map) +
geom_point(data = data, aes(x = lon, y = lat), color = "red", size = 4)
library(tidyverse)
library(ggridges)
library(viridis)
library(hrbrthemes)
library(patchwork)
library(gapminder)
library(ggplot2)
library(ggplotlyExtra)
library(ggcorrplot)
library(ggExtra)
library(ggalt)
library(quantmod)
library(ggthemes)
library(waffle)
library(highcharter)
library(dplyr)
library(ggfortify)
library(ggmap)
library(directlabels)
gapminder
gapminder %>%
filter(year == 2007) %>%
select(country,lifeExp,continent)
gapminder %>%
filter(year == 2007) %>%
select(country,lifeExp,continent)
map <- get_map(location = "world",zoom = 2)
dplyr
mpg
midwest
theme_set(theme_bw())
ggplot(midwest, aes(area,poptotal)) +
geom_point()
ggplot(midwest, aes(area,poptotal, color = state, size = popdensity)) +
geom_point()
ggplot(midwest, aes(area,poptotal, color = state, size = popdensity)) +
geom_point(show.legend = FALSE) +
directlabels::geom_dl(aes(label = state), method = "smart.grid")
#PARTIE 1
#1 decrivons les données contenue dans le dataset mpg
library(ggplot2)
?mpg
#les données du dataset mpg renseignent sur l"economie du carburant de 1999 à 2008 for 38 models de vehicules populaire
# type de graphique
ggplot(mpg, aes(displ,hwy,color = factor(cyl))) +
geom_point()
#ce code correspond à un graphique de type scatterplot
#4 modifions ce graphique pour que la couleur des points soit fonction du fabrican
mpg
ggplot(mpg, aes(displ, hwy, color = factanal(manufacturer))) +
geom_point
ggplot(mpg, aes(displ, hwy, color = factanal(manufacturer))) +
geom_point()
ggplot(mpg, aes(displ, hwy, color = factor(manufacturer))) +
geom_point()
#5 comparaisons des graphiques
ggplot(mpg, aes(displ,hwy)) +
geom_piont() +
geom_point(aes(color=class)) +
geom_smooth(method = "lm", se = FALSE) +
theme(legend.position = "none")
ggplot(mpg, aes(displ,hwy)) +
geom_point(aes(color=class)) +
geom_smooth(method = "lm", se = FALSE) +
theme(legend.position = "none")
ggplot(mpg, aes(displ,hwy, color = class)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
theme(legend.position = "none")
#pour le premier graphique, l'aspect mis en avant est la droite de regression sans intervalle de confiance pour la capacité da carburant
#pour le deuxieme graphiq
#affichons les graphiques
# 6 affichons tous les datasets disponible dans les packages installés dans notre environnement
data()
#7 avec une geometrie judicieusemment choisis représentons les données du dataset aus_athletes
?Aus_athletes
library(gapminder)
library(tidyverse)
data(package = .packages(all.available = TRUE))
# 7
library(ggridges)
Aus_athletes
gt <- ggplot(Aus_athletes, aes(height,weight,)) +
geom_boxplot(aes(fill = factor(sport)))
gt
library(plotly)
ggplotly(gt)
#PARTIE 1
> #1 decrivons les données contenue dans le dataset mpg
#PARTIE 1
> #1 decrivons les données contenue dans le dataset mp
library(ggplot2)
#les données du dataset mpg renseignent sur l"economie du carburant de 1999 à 2008 for 38 models de vehicules populaire
> ggplot(mpg, aes(displ,hwy,color = factor(cyl))) +
#8
midù
midwest
ggplot(aes(poptotal, color = state)) +
geom_density(aes(fill = factor(state)))
ggplot(midwest,aes(poptotal)) +
geom_density(aes(fill = state)) +
labs(title = "densite de la population par etat",)
ggplot(midwest,aes(poptotal)) +
geom_density(aes(fill = state)) +
labs(title = "densite de la population par etat",caption = "source:midwest",x = "population total")
# la densite de la population totale par états
ggg <- ggplot(midwest,aes(poptotal)) +
geom_density(aes(fill = state)) +
labs(title = "densite de la population par etat",caption = "source:midwest",x = "population total")
ggg
ggplotly(ggg)
library(roxygen2)
library(devtools)
create("matpauli")
licence()
library(devtools)
create("MatricesPauli")
setwd("MatricesPauli")
load_all()
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/AppliMatPauli.R")
source("~/MatricesPauli/R/ProbaMesure.R")
source("~/MatricesPauli/R/ProbaMesure.R")
source("~/MatricesPauli/R/ProbaMesure.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/AppliMatPauli.R")
source("~/MatricesPauli/R/EffMesure.R")
document()
install()
library(MatricesPauli)
etat <- etat_superposition(1 / sqrt(2), 1 / sqrt(2))
alpha <- c(1 / sqrt2)
alpha(1 / sqrt(2))
etat <- etat_superposition(alpha = 1 / sqrt(2), beta = 1 / sqrt(2))
source("~/MatricesPauli/R/EffMesure.R")
alpha
alpha <- 1 /sqrt(2)
beta <- 1 /sqrt(2)
etat <- etat_superposition(alpha,beta)
source("~/MatricesPauli/R/EtatSuperposition.R")
etat <- etat_superposition(alpha,beta)
etat
print(etat)
# appliquons la matrice sigma_z
source("~/MatricesPauli/R/AppliMatPauli.R")
nouvel_etat <- Amatrice_pauli(etat, "sigma_z")
print(nouvel_etat)
#calculons la probabilites de mesure
calcul <- proba_mesure(nouvel_etat)
print(nouvel_etat)
print(calcul)
#simulons une mesure
simulation <- simul_mesure(nouvel_etat)
simulation <- simul_mesure(nouvel_etat)
source("~/MatricesPauli/R/EffMesure.R")
simulation <- simul_mesure(nouvel_etat)
print(simulation)
source("~/MatricesPauli/R/EffMesure.R")
?Amatrice_pauli
source("~/MatricesPauli/R/AppliMatPauli.R")
?etat_superposition
?proba_mesure
?simul_mesure
source("~/MatricesPauli/R/EffMesure.R")
source("~/MatricesPauli/R/ProbaMesure.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
library(MatricesPauli)
alpha <- 1 / sqrt(2)
beta <- 1 / sqrt(2)
superposition <- etat_superposition(alpha,beta)
alpha
beta
superposition <- etat_superposition(alpha,beta)
superposition <- etat_superposition(alpha =1 /sqrt(2), beta = 1 /sqrt(2) )
etat_superposition(alpha,beta = )
etat_superposition(alpha,beta)
library(MatricesPauli)
?etat_superposition
alpha <- 1 / sqrt(2)
beta <- 1 / sqrt(2)
etat_superposition(alpha,beta)
source("~/MatricesPauli/R/EtatSuperposition.R")
alpha <- 1 / sqrt(2)
apha <- 1 / sqrt(2)
apha
beta <- 1 / sqrt(2)
beta
etat_superposition(apha,beta)
source("~/MatricesPauli/R/EtatSuperposition.R")
alpha <- 1 / sqrt(2)
alpha
beta <- 1 / sqrt(2)
beta
etat_superposition(alpha,beta)
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
source("~/MatricesPauli/R/EtatSuperposition.R")
library(MatricesPauli)
alpha <- 1 / sqrt(2)
beta <- 1 / sqrt(2)
alpha
beta
superposition <- etat_superposition(alpha,beta)
library(MatricesPauli)
apha <- 1 / sqrt(2)
apha
beta <- 1 / sqrt(2)
beta
superposition <- etat_superposition(apha,beta)
superposition
#matrice correspondante
mat <- Amatrice_pauli
mat <- Amatrice_pauli(etat,matrix)
library(devtools)
devtools::document()
devtools::install()
library(MatricesPauli)
alpha <- sqrt(3) / 2
beta <- 1 / 2
etat <- etat_superposition(alpha,beta)
print("etat de superposition initial")
print(etat)
#la matrice de l'operateur de mesure
matrice <- Amatrice_pauli(etat,"sigma_z")
print(matrice)
#effeeectuons la mezsure
mesure <- proba_mesure(etat)
print(mesure)
#simulation
simulation <- simul_mesure(etat)
print(simulation)
source("~/MatricesPauli/R/EffMesure.R")
simulation <- simul_mesure(etat)
print(simulation)
print(simulation)
source("~/MatricesPauli/R/EffMesure.R")
simulation <- simul_mesure(etat)
simulation <- simul_mesure(etat)
source("~/MatricesPauli/R/EffMesure.R")
simulation <- simul_mesure(etat)
simulation <- simul_mesure(etat)
print("les resultat de mesure et l'eta effondrer sont:")
print(simulation)
eigen(sigma_z)
source("~/MatricesPauli/R/EffMesure.R")
library(devtools)
devtools::document()
library(MatricesPauli)
matrices_pauli()
?Amatrice_pauli
?proba_mesure
?simul_mesure
?etat_superposition
library(devtools)
devtools::document()
devtools::install()
library(MatricesPauli)
MatricesPauli()
?etat_superposition
?Amatrice_pauli
?proba_mesure
?simul_mesure
library(devtools)
devtools::document()
library(MatricesPauli)
devtools::install()
alpha <- sqrt(3) / 2
beta <- 1 / 2
etat <- proba_mesure()
etat <- etat_superposition(alpha,beta)
print(etat)
library(devtools)
devtools::document()
devtools::install()
alpha <- sqrt(3) / 2
beta <- 1 / 2
etat <- etat_superposition(alpha,beta)
print(etat)
library(devtools)
devtools::document()
install.packages("MatricesPauli")
library(devtools)
devtools::as.package()
devtools::document
devtools::install()
library(MatricesPauli)
update_packages("MatricesPauli")
traceback()
library(devtools)
devtools::install()
library(MatricesPauli)
alpha <- sqrt(3) / 2
beta <- 1 / 2
etat <- etat_superposition(alpha,beta)
print(etat)
nouv <- etat_superposition(etat)
nouv <- etat_superposition(etat,"z")
nouv <- Amatrice_pauli(etat,"z")
nouv <- Amatrice_pauli(etat,"sigma_z")
nouv
prob <- proba_mesure(etat)
print(prob)
eff <- simul_mesure(etat)
print("l'etat est")
print(eff)
libar
library(devtools)
install(Householder)
install("Householder")
library(devtools)
install()
library(devtools)
install("Householder")
library(devtools)
devtools::install()
library(MatricesPauli)
alpah <- sqrt(3)
beta <- 1 / 2
alpah <- sqrt(3) / 2
etat <- etat_superposition(alpha,beta)
alpha <- sqrt(3) / 2
beta <- 1 / 2
etat <- etat_superposition(alpha,beta)
etat
nouv <- Amatrice_pauli(etat,"sigma_z")
nouv
prob <- proba_mesure(etat)
pribt
print(prob)
eff <- simul_mesure(etat)
print(eff)
#autre exemple
alpha <- 1 / sqrt(2)
beta <- 1 / sqrt(2)
sup <- etat_superposition(alpha,beta = )
sup <- etat_superposition(alpha,beta)
print("l'etat initial est")
print(sup)
*
mat <- Amatrice_pauli(sup,"sigma_z")
print("le nouvel etat est:")
print(mat)
mes <- proba_mesure(mat)
print("la probabilité est:)
"
print("la probabilité est:")
print(mes)
inter <- simul_mesure(mat)
print(inter)
library(devtools)
devtools::install()
library(MatricesPauli)
#etat de lsuperposition
alpha <- sqrt(3) / 2
beta <- 1 / 2
gg <- etat_superposition(alpha,beta)
gg
dr <- Amatrice_pauli(gg,"sigma_z")
print("le nouvel etat est:")
print(dr)
ms <- proba_mesure(dr)
print("la probabilite de mesure est pour chaque etat est:")
print(ms)
ss <- simul_mesure(ms)
print(ss)
library(devtools)
devtools::install()
library(MatricesPauli)
alpha <- sqrt(3) / 2
beta <- 1 / sqrt(2)
ee <- etat_superposition(alpha,beta)
ee
git init
cd/chemin/vers/MatricesPauli
C:/user/documents/MatricesPAuli
C:user/documents/MatricesPAuli
library(devtools)
devtools::install_github("MatricesPauli")
